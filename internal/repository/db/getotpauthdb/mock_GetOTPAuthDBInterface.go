// Code generated by mockery v2.38.0. DO NOT EDIT.

package getotpauthdb

import (
	context "context"

	domain "github.com/hansengotama/authentication-backend/internal/domain"
	mock "github.com/stretchr/testify/mock"

	postgres "github.com/hansengotama/authentication-backend/internal/lib/postgres"
)

// MockGetOTPAuthDBInterface is an autogenerated mock type for the GetOTPAuthDBInterface type
type MockGetOTPAuthDBInterface struct {
	mock.Mock
}

// GetOTPAuth provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockGetOTPAuthDBInterface) GetOTPAuth(_a0 context.Context, _a1 postgres.SQLExecutor, _a2 GetOTPAuthParam) (domain.OtpAuth, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetOTPAuth")
	}

	var r0 domain.OtpAuth
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.SQLExecutor, GetOTPAuthParam) (domain.OtpAuth, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postgres.SQLExecutor, GetOTPAuthParam) domain.OtpAuth); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(domain.OtpAuth)
	}

	if rf, ok := ret.Get(1).(func(context.Context, postgres.SQLExecutor, GetOTPAuthParam) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockGetOTPAuthDBInterface creates a new instance of MockGetOTPAuthDBInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetOTPAuthDBInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetOTPAuthDBInterface {
	mock := &MockGetOTPAuthDBInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
